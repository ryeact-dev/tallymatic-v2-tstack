/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WaitingPageRouteImport } from './routes/waiting-page'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as UnauthenticatedRouteImport } from './routes/unauthenticated'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedCompetitionsRouteImport } from './routes/_protected/competitions'
import { Route as ProtectedSettingsUsersRouteImport } from './routes/_protected/settings.users'
import { Route as ProtectedSettingsEventsRouteImport } from './routes/_protected/settings.events'
import { Route as ProtectedSettingsCompetitionsRouteImport } from './routes/_protected/settings.competitions'
import { Route as ProtectedSettingsCandidatesRouteImport } from './routes/_protected/settings.candidates'
import { Route as ProtectedResultsJudgeRouteImport } from './routes/_protected/results.judge'

const WaitingPageRoute = WaitingPageRouteImport.update({
  id: '/waiting-page',
  path: '/waiting-page',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/unauthenticated',
  path: '/unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedCompetitionsRoute = ProtectedCompetitionsRouteImport.update({
  id: '/competitions',
  path: '/competitions',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedSettingsUsersRoute = ProtectedSettingsUsersRouteImport.update({
  id: '/settings/users',
  path: '/settings/users',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedSettingsEventsRoute = ProtectedSettingsEventsRouteImport.update({
  id: '/settings/events',
  path: '/settings/events',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedSettingsCompetitionsRoute =
  ProtectedSettingsCompetitionsRouteImport.update({
    id: '/settings/competitions',
    path: '/settings/competitions',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedSettingsCandidatesRoute =
  ProtectedSettingsCandidatesRouteImport.update({
    id: '/settings/candidates',
    path: '/settings/candidates',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedResultsJudgeRoute = ProtectedResultsJudgeRouteImport.update({
  id: '/results/judge',
  path: '/results/judge',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/waiting-page': typeof WaitingPageRoute
  '/competitions': typeof ProtectedCompetitionsRoute
  '/results/judge': typeof ProtectedResultsJudgeRoute
  '/settings/candidates': typeof ProtectedSettingsCandidatesRoute
  '/settings/competitions': typeof ProtectedSettingsCompetitionsRoute
  '/settings/events': typeof ProtectedSettingsEventsRoute
  '/settings/users': typeof ProtectedSettingsUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/waiting-page': typeof WaitingPageRoute
  '/competitions': typeof ProtectedCompetitionsRoute
  '/results/judge': typeof ProtectedResultsJudgeRoute
  '/settings/candidates': typeof ProtectedSettingsCandidatesRoute
  '/settings/competitions': typeof ProtectedSettingsCompetitionsRoute
  '/settings/events': typeof ProtectedSettingsEventsRoute
  '/settings/users': typeof ProtectedSettingsUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/unauthenticated': typeof UnauthenticatedRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/waiting-page': typeof WaitingPageRoute
  '/_protected/competitions': typeof ProtectedCompetitionsRoute
  '/_protected/results/judge': typeof ProtectedResultsJudgeRoute
  '/_protected/settings/candidates': typeof ProtectedSettingsCandidatesRoute
  '/_protected/settings/competitions': typeof ProtectedSettingsCompetitionsRoute
  '/_protected/settings/events': typeof ProtectedSettingsEventsRoute
  '/_protected/settings/users': typeof ProtectedSettingsUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/waiting-page'
    | '/competitions'
    | '/results/judge'
    | '/settings/candidates'
    | '/settings/competitions'
    | '/settings/events'
    | '/settings/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/waiting-page'
    | '/competitions'
    | '/results/judge'
    | '/settings/candidates'
    | '/settings/competitions'
    | '/settings/events'
    | '/settings/users'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/deferred'
    | '/login'
    | '/unauthenticated'
    | '/unauthorized'
    | '/waiting-page'
    | '/_protected/competitions'
    | '/_protected/results/judge'
    | '/_protected/settings/candidates'
    | '/_protected/settings/competitions'
    | '/_protected/settings/events'
    | '/_protected/settings/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  LoginRoute: typeof LoginRoute
  UnauthenticatedRoute: typeof UnauthenticatedRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  WaitingPageRoute: typeof WaitingPageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/waiting-page': {
      id: '/waiting-page'
      path: '/waiting-page'
      fullPath: '/waiting-page'
      preLoaderRoute: typeof WaitingPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/unauthenticated': {
      id: '/unauthenticated'
      path: '/unauthenticated'
      fullPath: '/unauthenticated'
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/competitions': {
      id: '/_protected/competitions'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof ProtectedCompetitionsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/users': {
      id: '/_protected/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof ProtectedSettingsUsersRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/events': {
      id: '/_protected/settings/events'
      path: '/settings/events'
      fullPath: '/settings/events'
      preLoaderRoute: typeof ProtectedSettingsEventsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/competitions': {
      id: '/_protected/settings/competitions'
      path: '/settings/competitions'
      fullPath: '/settings/competitions'
      preLoaderRoute: typeof ProtectedSettingsCompetitionsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/settings/candidates': {
      id: '/_protected/settings/candidates'
      path: '/settings/candidates'
      fullPath: '/settings/candidates'
      preLoaderRoute: typeof ProtectedSettingsCandidatesRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/results/judge': {
      id: '/_protected/results/judge'
      path: '/results/judge'
      fullPath: '/results/judge'
      preLoaderRoute: typeof ProtectedResultsJudgeRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedCompetitionsRoute: typeof ProtectedCompetitionsRoute
  ProtectedResultsJudgeRoute: typeof ProtectedResultsJudgeRoute
  ProtectedSettingsCandidatesRoute: typeof ProtectedSettingsCandidatesRoute
  ProtectedSettingsCompetitionsRoute: typeof ProtectedSettingsCompetitionsRoute
  ProtectedSettingsEventsRoute: typeof ProtectedSettingsEventsRoute
  ProtectedSettingsUsersRoute: typeof ProtectedSettingsUsersRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedCompetitionsRoute: ProtectedCompetitionsRoute,
  ProtectedResultsJudgeRoute: ProtectedResultsJudgeRoute,
  ProtectedSettingsCandidatesRoute: ProtectedSettingsCandidatesRoute,
  ProtectedSettingsCompetitionsRoute: ProtectedSettingsCompetitionsRoute,
  ProtectedSettingsEventsRoute: ProtectedSettingsEventsRoute,
  ProtectedSettingsUsersRoute: ProtectedSettingsUsersRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  DeferredRoute: DeferredRoute,
  LoginRoute: LoginRoute,
  UnauthenticatedRoute: UnauthenticatedRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  WaitingPageRoute: WaitingPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
